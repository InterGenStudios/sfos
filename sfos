#!/usr/bin/perl
# -----------------------------------------------------------------------------------
# sfos.pl - s.earch f.iles o.f s.ize
# sfos Version: 1.0
# Github: https://github.com/InterGenStudios/sfos
# -----------------------------------------------------------------------------------
# InterGenStudios: 3-5-2016
# Copyright (c) 2015: Christopher 'InterGen' Cork  InterGenStudios
# URL: https://intergenstudios.com
# -----------------------------------------------------------------------------------
# License: GPL-2.0+
# URL: http://opensource.org/licenses/gpl-license.php
# -----------------------------------------------------------------------------------
# sfos is free software:
# You may redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your discretion)
# any later version.
#
# ** Note ** - cPanel/WHM servers will need 'Task::Cpanel::Internal'
#              In WHM, navigate to 'Home »Software »Install a Perl Module'
#              and install the module packages- they may take some time to install
# -----------------------------------------------------------------------------------

# Make sure we're running as root
die "\n\n  SFOS must be run as root!\n\n" if $> != 0;

use strict; use warnings; use Switch; use File::Find::Rule; use Math::Round qw(:all);
use POSIX qw(strftime);

my $clear_screen = `clear`;
my %preset_path = (
    "path1" => "/var/log",
    "path2" => "/var/lib/mysql",
    "path3" => "/home"
);
my $target_path = "waiting_for_value";
my $timestamp = strftime "%F_%R:%S", localtime;
my $logdir = "/var/log/sfos/";
my $logfile = "$logdir" . "$timestamp";

if ( !-d $logdir ) {
    mkdir ( $logdir ) or die "Failed to create $logdir, $!";
}

open (STDOUT, "| tee $logdir$timestamp");

sub run_script {
    print $clear_screen; print "\n\n  Select search path:\n";
    print "  -------------------\n\n"; print "  1) /var/log\n";
    print "  2) /var/lib/mysql\n"; print "  3) /home\n";
    print "  4) Custom Path\n\n"; print "  [ Enter Selection ]: ";
    my $initial_path_choice = <>;
    chomp $initial_path_choice;
    switch($initial_path_choice){
        case 1  { $target_path = $preset_path{"path1"}; }
        case 2  { $target_path = $preset_path{"path2"}; }
        case 3  { $target_path = $preset_path{"path3"}; }
        case 4  { print "\n\n  Enter valid search path: ";
                  my $custom_path = <>; chomp $custom_path;
                  if ( -d $custom_path ) {
                      $target_path = $custom_path;
                  }
                  else {
                      print "\n\n  Error!\n\n";
                      print "  Directory '$custom_path' doesn't exist!\n\n";
                      sleep(2); run_script();
                  }
                }
        else    { print "\n  Invalid Selection!\n\n"; sleep(2); run_script(); }
    }
    if ( -d $target_path ) {
        print "\n\n  Enter minimum filesize to display in MB: ";
    }
    else {
        print "\n\n  Error!\n\n";
        print "  Directory '$target_path' doesn't exist!\n\n";
        sleep(2); run_script();
    }
    my $minimum_filesize = <>; chomp $minimum_filesize;
    print "\n\n  Searching recursively in $target_path";
    print "\n  for files $minimum_filesize MB in size or larger...\n\n";
    print "  --------------------------------------------\n\n";
    my @files = File::Find::Rule->file()
                                ->name( '*' )
                                ->in( $target_path );
    for my $file (@files) {
        if ( (stat $file)[7] < ($minimum_filesize * 1048576) ) {
            next;
        }
        else {
            my $filesize = ( (stat $file)[7] / 1048576 );
            my $rounded_filesize = nearest(.1, $filesize);
            printf ("%- 130s %s\n", "\n  $file", "  $rounded_filesize MB");
        }
    }
    print "\n\n\n  --------------------------------------------\n\n";
    print "\n\n  File list complete.\n\n\n";
}

run_script();

print "\n\n  Create pastebin? (Y/n): ";

my $paste_instruction = <>; chomp $paste_instruction;
if ( grep { $paste_instruction eq $_ } qw{Y y YES Yes yes} ) {
    my @paste = `cat $logfile`;
    open (my $pastefile, '>', 'pastefile.txt') || die "Can't open pastefile.txt : $!";
    print $pastefile `curl -d name=sfos -d expire=2592000 -d private=1 --data-urlencode text='@paste' -s http://nobits.ml/api/create`;
    close ($pastefile);
} else {
    print "\n\n  Pastebin skipped.\n\n\n";
}

if ( -f "pastefile.txt" ) {
    open (FILE, "<pastefile.txt") || die "File not found";
    my @lines = <FILE>;
    close(FILE);
    my @newlines;
    foreach(@lines) {
        $_ =~ s/view/view\/raw/g;
        push(@newlines,$_);
    }
    open (FILE, ">pastefile.txt") || die "File not found";
    print FILE @newlines;
    close (FILE);
    open (FILE, "<pastefile.txt") || die "Can't open pastefile.txt : $!";
    print "\n\n";
    while( <FILE> ) {
        print "  ===> "; print; print "\n  Your paste will expire in 30 days.\n\n\n";
    }
    close (FILE);
}

unlink ("pastefile.txt");

close (STDOUT);

exit 0;
